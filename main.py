# main.py
import telebot
import config
from utils.logger import logger, log_user_action
from utils.storage import (
    set_state,
    get_state,
    save_user_source,
    STATE_MAIN_MENU,
    STATE_ORDER,
    STATE_ORDER_DETAILS,
    STATE_TRACK_ORDER,
    STATE_FEEDBACK,
    STATE_CALCULATE_COST,
    STATE_MAIN_INFO,
    STATE_DOWNLOAD_APP,
    STATE_AGREEMENT,
    STATE_TEST_QUESTION_1,
    STATE_TEST_QUESTION_2
)
from handlers import (
    MenuHandler,
    OrderHandler,
    FeedbackHandler,
    CalculateHandler,
    DownloadHandler,
    MainInfoHandler,
    AgreementHandler,
    TestHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(config.TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
menu_handler = MenuHandler(bot)
order_handler = OrderHandler(bot)
feedback_handler = FeedbackHandler(bot)
calculate_handler = CalculateHandler(bot)
download_handler = DownloadHandler(bot)
main_info_handler = MainInfoHandler(bot)
test_handler = TestHandler(bot, menu_handler)  # –ü–µ—Ä–µ–¥–∞—á–∞ menu_handler
agreement_handler = AgreementHandler(bot, test_handler)  # –ü–µ—Ä–µ–¥–∞—á–∞ test_handler


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    username = message.from_user.username

    logger.info(f"–ü–æ–ª—É—á–µ–Ω /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, username: {username}")

    if not username:
        bot.send_message(
            user_id,
            text="‚ö†Ô∏è –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        logger.warning(f"ID: {user_id}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞—á–∞—Ç–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ —Å—Å—ã–ª–∫–∏ (–µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω)
    parts = message.text.split(' ')
    ref_source_code = parts[1] if len(parts) > 1 else None
    ref_source = config.REF_SOURCES.get(ref_source_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    is_new_user = save_user_source(user_id, username, ref_source)

    if is_new_user:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
        agreement_handler.send_agreement(message)
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    log_user_action(user_id, username, "—Å—Ç–∞—Ä—Ç")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    bot.send_message(user_id, text=f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n{config.WORK_SCHEDULE}")
    menu_handler.main_menu(message)


@bot.message_handler(content_types=['text', 'photo'])
def handle_messages(message):
    user_id = message.chat.id
    username = message.from_user.username

    logger.info(
        f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, username: {username}, content_type: {message.content_type}")

    if not username:
        bot.send_message(
            user_id,
            text="‚ö†Ô∏è –£ –≤–∞—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username –≤ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–∫–∫–∞—É–Ω—Ç–∞ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        )
        logger.warning(f"ID: {user_id}: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç username, –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_source(user_id, username, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫")  # –ú–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    action = message.text if message.content_type == 'text' else '–§–æ—Ç–æ'
    log_user_action(user_id, username, action)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    state = get_state(user_id, STATE_MAIN_MENU)

    if state == STATE_AGREEMENT:
        agreement_handler.handle_accept_agreement(message)
    elif state == STATE_TEST_QUESTION_1:
        test_handler.handle_question_1(message)
    elif state == STATE_TEST_QUESTION_2:
        test_handler.handle_question_2(message)
    elif message.text == "üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        menu_handler.main_menu(message)
    elif state == STATE_MAIN_MENU:
        handle_main_menu_actions(message)
    elif state == STATE_ORDER:
        order_handler.handle_order_photo(message)
    elif state == STATE_ORDER_DETAILS:
        order_handler.handle_order_details(message)
    elif state == STATE_TRACK_ORDER:
        track_order(message)
    elif state == STATE_FEEDBACK:
        feedback_handler.handle_feedback(message)
    elif state == STATE_CALCULATE_COST:
        calculate_handler.handle_calculate_cost(message)
    elif state == STATE_MAIN_INFO:
        main_info_handler.handle_main_info(message)
    elif state == STATE_DOWNLOAD_APP:
        download_handler.handle_download_app(message)
    else:
        logger.warning(f"ID: {user_id} (@{username}): –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        bot.send_message(message.chat.id, text="–ù–∞ —Ç–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —è –Ω–µ –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω.")


def handle_main_menu_actions(message):
    user_id = message.chat.id
    username = message.from_user.username
    action = message.text

    log_user_action(user_id, username, action)

    if action == "üõí –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑":
        bot.send_message(
            user_id,
            text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å Poizon, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.\n‚ùó‚ùó‚ùó–í–ê–ñ–ù–û‚ùó‚ùó‚ùó\n–î–æ—Å—Ç–∞–≤–∫–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –†–§.",
            reply_markup=order_handler.create_back_markup()
        )
        set_state(user_id, STATE_ORDER)
    elif action == "üì¶ –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑":
        bot.send_message(
            user_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑'.\n–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–¥–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ: https://www.cdek.ru/ru/cabinet/orders",
            reply_markup=order_handler.create_back_markup()
        )
        set_state(user_id, STATE_TRACK_ORDER)
    elif action == "üí¨ –û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è":
        bot.send_message(
            user_id,
            text="–í—ã –≤—ã–±—Ä–∞–ª–∏ '–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=feedback_handler.create_back_markup()
        )
        set_state(user_id, STATE_FEEDBACK)
    elif action == "üìà –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å":
        bot.send_message(
            user_id,
            text="–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ —é–∞–Ω—è—Ö. –ú–∏–Ω–∏–º—É–º 100 CNY.",
            reply_markup=calculate_handler.create_back_markup()
        )
        set_state(user_id, STATE_CALCULATE_COST)
    elif action == "‚ÑπÔ∏è –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        bot.send_message(
            user_id,
            text=f"{main_info_handler.get_main_info_text()}\n\n{config.WORK_SCHEDULE}",
            reply_markup=main_info_handler.create_info_markup()
        )
        set_state(user_id, STATE_MAIN_INFO)
    elif action == "üìÑ –ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—ã–∫—É–ø":
        bot.send_message(
            user_id,
            text=main_info_handler.get_purchase_info_text(),
            reply_markup=order_handler.create_back_markup()
        )
        set_state(user_id, STATE_MAIN_MENU)
    elif action == "üì≤ –°–∫–∞—á–∞—Ç—å Poizon":
        bot.send_message(
            user_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
            reply_markup=download_handler.create_platform_markup()
        )
        set_state(user_id, STATE_DOWNLOAD_APP)
    else:
        logger.warning(f"ID: {user_id} (@{username}): –ù–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.")
        bot.send_message(user_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π.",
                         reply_markup=order_handler.create_back_markup())


def track_order(message):
    user_id = message.chat.id
    username = message.from_user.username

    bot.send_message(
        user_id,
        text="–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–¥–∏—Ç—å —Å–≤–æ–π –∑–∞–∫–∞–∑ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ: https://www.cdek.ru/ru/cabinet/orders",
        reply_markup=order_handler.create_back_markup()
    )
    log_user_action(user_id, username, "–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")
    set_state(user_id, STATE_MAIN_MENU)


if __name__ == "__main__":
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞: {e}")
