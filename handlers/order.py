# handlers/order.py
from telebot import types
from handlers.base import BaseHandler
from utils.storage import set_state, STATE_MAIN_MENU , STATE_ORDER_DETAILS, USER_PHOTOS, USER_ORDERS
from utils.logger import log_user_action
from config import ADMIN_CHAT_ID  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ADMIN_CHAT_ID
import logging

logger = logging.getLogger("telegram_bot")

class OrderHandler(BaseHandler):
    def handle_order_photo(self, message):
        user_id = message.chat.id
        username = message.from_user.username

        if message.content_type == 'photo':
            file_id = message.photo[-1].file_id
            USER_PHOTOS[user_id] = file_id
            log_user_action(user_id, username, f"–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ (file_id: {file_id})")
            self.bot.send_message(
                user_id,
                text="–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ (—Ä–∞–∑–º–µ—Ä, —Ü–µ–Ω–∞ –≤ —é–∞–Ω—è—Ö –∏ –ø—Ä–æ—á–∏–µ –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏).",
                reply_markup=self.create_back_markup()
            )
            set_state(user_id, STATE_ORDER_DETAILS)
        else:
            self.bot.send_message(user_id, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞.", reply_markup=self.create_back_markup())

    def handle_order_details(self, message):
        user_id = message.chat.id
        username = message.from_user.username
        order_details = message.text

        USER_ORDERS[user_id] = order_details
        log_user_action(user_id, username, f"–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ: {order_details}")

        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
        file_id = USER_PHOTOS.get(user_id)
        if not file_id:
            self.bot.send_message(
                user_id,
                text="–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.",
                reply_markup=self.create_back_markup()
            )
            logger.error(f"ID: {user_id} (@{username}): –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∑–∞–∫–∞–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            set_state(user_id, STATE_MAIN_MENU)
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        try:
            self.bot.send_photo(
                ADMIN_CHAT_ID,
                photo=file_id,
                caption=f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç @{username}*\n\nüìã *–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:*\n{order_details}",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {e}")
            self.bot.send_message(
                user_id,
                text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=self.create_back_markup()
            )
            set_state(user_id, STATE_MAIN_MENU)
            return

        self.bot.send_message(
            user_id,
            text="–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–ø–∞—Å–∏–±–æ!",
            reply_markup=self.create_back_markup()
        )
        set_state(user_id, STATE_MAIN_MENU)

    def create_back_markup(self):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back_button = types.KeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        markup.add(back_button)
        return markup
